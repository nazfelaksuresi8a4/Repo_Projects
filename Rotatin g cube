import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

# 3D küp noktaları (8 köşe)
cube_points = np.array([
    [-1, -1, -1],
    [-1, -1,  1],
    [-1,  1, -1],
    [-1,  1,  1],
    [ 1, -1, -1],
    [ 1, -1,  1],
    [ 1,  1, -1],
    [ 1,  1,  1]
])

# Küp kenarları (noktaların bağlantısı)
cube_edges = [
    (0, 1), (0, 2), (0, 4),
    (1, 3), (1, 5),
    (2, 3), (2, 6),
    (3, 7),
    (4, 5), (4, 6),
    (5, 7),
    (6, 7)
]

# Matplotlib figure ve axes (aksları gizleyeceğiz)
fig, ax = plt.subplots()
ax.axis('off')  # x ve y eksenlerini tamamen kapat
lines = [ax.plot([], [], 'k')[0] for _ in cube_edges]  # siyah kenar çizgileri

# 3D noktayı 2D ye perspektif ile çeviren fonksiyon
def project(points, angle):
    # Basit rotasyon matrisi (Y ve X ekseni etrafında döndürür)
    rotation_y = np.array([
        [np.cos(angle), 0, np.sin(angle)],
        [0, 1, 0],
        [-np.sin(angle), 0, np.cos(angle)]
    ])
    rotation_x = np.array([
        [1, 0, 0],
        [0, np.cos(angle/2), -np.sin(angle/2)],
        [0, np.sin(angle/2),  np.cos(angle/2)]
    ])
    rotated = points @ rotation_y.T @ rotation_x.T
    
    # Perspektif projeksiyon (görünüş efekti verir)
    distance = 5
    factor = distance / (distance - rotated[:, 2])
    projected = rotated[:, :2] * factor[:, np.newaxis]
    return projected

# Update fonksiyonu (her karede küp dönecek)
def update(frame):
    projected = project(cube_points, frame * 0.05)
    for i, edge in enumerate(cube_edges):
        points = projected[list(edge)]
        lines[i].set_data(points[:, 0], points[:, 1])
    return lines

# Limits (görünür alan)
ax.set_xlim(-3, 3)
ax.set_ylim(-3, 3)

# Animasyon başlat
ani = FuncAnimation(fig, update, frames=900, interval=20, blit=False)

plt.show()
